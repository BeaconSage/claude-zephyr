#!/bin/bash

# Pre-commit hook for Claude Zephyr
# Runs comprehensive checks on all commits to ensure code quality

set -e  # Exit on any error

echo "🔍 Running pre-commit checks for Claude Zephyr..."
echo ""

# Color codes for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print status
print_status() {
    echo -e "${2}${1}${NC}"
}

# Function to print step
print_step() {
    echo -e "${YELLOW}📋 ${1}${NC}"
}

# 1. Format check
print_step "Checking code formatting with rustfmt..."
if ! cargo fmt --check; then
    print_status "❌ Format check failed!" $RED
    echo ""
    echo "Please run the following command to fix formatting issues:"
    echo "  cargo fmt"
    echo ""
    exit 1
fi
print_status "✅ Format check passed" $GREEN
echo ""

# 2. Clippy check
print_step "Running clippy for code quality..."
if ! cargo clippy --quiet -- -D warnings; then
    print_status "❌ Clippy check failed!" $RED
    echo ""
    echo "Please fix the clippy warnings above."
    echo ""
    exit 1
fi
print_status "✅ Clippy check passed" $GREEN
echo ""

# 3. Compile check
print_step "Running compile check..."
if ! cargo check --quiet; then
    print_status "❌ Compile check failed!" $RED
    echo ""
    echo "Please fix compilation errors above."
    echo ""
    exit 1
fi
print_status "✅ Compile check passed" $GREEN
echo ""

# 4. Test check (if tests exist)
if [ -d "tests/" ] || grep -q "\[dev-dependencies\]" Cargo.toml 2>/dev/null; then
    print_step "Running tests..."
    if ! cargo test --quiet; then
        print_status "❌ Tests failed!" $RED
        echo ""
        echo "Please fix failing tests above."
        echo ""
        exit 1
    fi
    print_status "✅ Tests passed" $GREEN
    echo ""
else
    print_status "ℹ️  No tests found, skipping test check" $YELLOW
    echo ""
fi

# 5. Final success message
print_status "🎉 All pre-commit checks passed!" $GREEN
print_status "📝 Ready to commit!" $GREEN
echo ""